<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0718.1543                               -->
<workbook original-version='18.1' source-build='2019.2.2 (20192.19.0718.1543)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='SVM_Test (SVM_Test)' inline='true' name='federated.0ohqyex0530aow17im6ju01eqfjz' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='SVM_Test' name='excel-direct.0ljzyyn1ytpj2w11y6vzj04ogfg0'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='F:/Work/MLprojects/R/SVM_Classification/SVM_Test.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0ljzyyn1ytpj2w11y6vzj04ogfg0' name='SVM_Test' table='[SVM_Test$]' type='table'>
          <columns gridOrigin='A1:D201:no:A1:D201:0' header='yes' outcome='6'>
            <column datatype='string' name='CustomerID' ordinal='0' />
            <column datatype='integer' name='Income' ordinal='1' />
            <column datatype='integer' name='Age' ordinal='2' />
            <column datatype='integer' name='Purchased' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>CustomerID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[CustomerID]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>CustomerID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Income]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>Income</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Age</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Age]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>Age</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Purchased</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Purchased]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>Purchased</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D201:no:A1:D201:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;' value='Donated' />
          <alias key='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;' value='Will Donate?' />
        </aliases>
      </column>
      <column caption='Will purchase' datatype='integer' name='[Calculation_1229201238432153600]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;    library(e1071)&#13;&#10;    train &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Training.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    model &lt;- svm(formula = Purchased ~ Income + Age, data=train, type=&apos;C-classification&apos;, kernel=&apos;linear&apos;)&#13;&#10;    test &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Test.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    predictions &lt;- predict(model, newdata= test[-4])&quot;,&#13;&#10;    SUM([Purchased]),&#13;&#10;    SUM([Income]),&#13;&#10;    SUM([Age])&#13;&#10;) -1'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Matched' datatype='integer' name='[Calculation_1229201238438064130]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Calculation_1229201238432153600] = MAX([Purchased])&#13;&#10;THEN 1&#13;&#10;ELSE 0&#13;&#10;END'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='1' datatype='integer' name='[Calculation_1229201238447734787]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Customer ID' datatype='string' name='[CustomerID]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Purchased]' role='measure' type='quantitative' />
      <column-instance column='[CustomerID]' derivation='None' name='[none:CustomerID:nk]' pivot='key' type='nominal' />
      <column-instance column='[Purchased]' derivation='Sum' name='[sum:Purchased:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1229201238432153600]' derivation='User' name='[usr:Calculation_1229201238432153600:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
      </column-instance>
      <layout dim-ordering='alphabetic' dim-percentage='0.40367' measure-ordering='alphabetic' measure-percentage='0.59633' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Egypt&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='SVM Classifier'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#f5f5f5'>SVM Classifier </run>
            <run fontalignment='1'>Æ&#10;</run>
            <run bold='true' fontalignment='1' fontcolor='#f5f5f5'>How likely would a donor donate again? </run>
            <run fontalignment='1'>Æ&#10;</run>
            <run bold='true' fontalignment='1' fontcolor='#f5f5f5'>(Based on his/her Age and Income)</run>
            <run fontalignment='1'>Æ&#10;&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SVM_Test (SVM_Test)' name='federated.0ohqyex0530aow17im6ju01eqfjz' />
          </datasources>
          <datasource-dependencies datasource='federated.0ohqyex0530aow17im6ju01eqfjz'>
            <column datatype='integer' name='[Age]' role='measure' type='quantitative' />
            <column caption='Will purchase' datatype='integer' name='[Calculation_1229201238432153600]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;    library(e1071)&#13;&#10;    train &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Training.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    model &lt;- svm(formula = Purchased ~ Income + Age, data=train, type=&apos;C-classification&apos;, kernel=&apos;linear&apos;)&#13;&#10;    test &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Test.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    predictions &lt;- predict(model, newdata= test[-4])&quot;,&#13;&#10;    SUM([Purchased]),&#13;&#10;    SUM([Income]),&#13;&#10;    SUM([Age])&#13;&#10;) -1'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Matched' datatype='integer' name='[Calculation_1229201238438064130]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Calculation_1229201238432153600] = MAX([Purchased])&#13;&#10;THEN 1&#13;&#10;ELSE 0&#13;&#10;END'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='1' datatype='integer' name='[Calculation_1229201238447734787]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Customer ID' datatype='string' name='[CustomerID]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Purchased]' role='measure' type='quantitative' />
            <column-instance column='[CustomerID]' derivation='None' name='[none:CustomerID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Age]' derivation='Sum' name='[sum:Age:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1229201238447734787]' derivation='Sum' name='[sum:Calculation_1229201238447734787:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Income]' derivation='Sum' name='[sum:Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Purchased]' derivation='Sum' name='[sum:Purchased:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1229201238432153600]' derivation='User' name='[usr:Calculation_1229201238432153600:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Calculation_1229201238438064130]' derivation='User' name='[usr:Calculation_1229201238438064130:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[federated.0ohqyex0530aow17im6ju01eqfjz].[Calculation_1229201238432153600]' ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Age:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Income:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Age:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Income:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='border-color' scope='cols' value='#ffffff' />
            <format attr='border-width' scope='cols' value='0' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='color' data-class='subtotal' scope='rows' value='#f5f5f5' />
            <format attr='color' data-class='subtotal' scope='cols' value='#f5f5f5' />
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='wrap' data-class='subtotal' scope='rows' value='auto' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-color' scope='rows' value='#ffffff' />
            <format attr='border-width' scope='rows' value='0' />
            <format attr='border-style' scope='rows' value='none' />
            <format attr='border-width' scope='cols' value='0' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='border-color' data-class='subtotal' scope='cols' value='#f9a655' />
            <format attr='border-width' data-class='subtotal' scope='cols' value='0' />
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-color' data-class='total' scope='rows' value='#e6e6e6' />
            <format attr='border-width' data-class='total' scope='rows' value='0' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
            <format attr='text-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Calculation_1229201238447734787:ok]' value='false' />
            <format attr='color' scope='rows' value='#f5f5f5' />
            <format attr='color' scope='cols' value='#f5f5f5' />
            <format attr='font-weight' scope='cols' value='bold' />
            <format attr='font-size' scope='cols' value='10' />
            <format attr='text-align' scope='cols' value='auto' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238438064130:qk:1]' num-steps='2' reverse='true' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#d8d8d8</color>
                <color>#c0c0c0</color>
                <color>#a8a8a8</color>
                <color>#909090</color>
                <color>#787878</color>
                <color>#606060</color>
                <color>#484848</color>
                <color>#303030</color>
                <color>#181818</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-width' value='0' />
            <format attr='border-style' value='none' />
            <format attr='border-width' scope='rows' value='1' />
            <format attr='border-style' scope='rows' value='solid' />
            <format attr='border-color' scope='cols' value='#ffffff' />
            <format attr='border-width' scope='cols' value='0' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='border-width' data-class='subtotal' scope='cols' value='0' />
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-width' data-class='total' scope='cols' value='0' />
            <format attr='border-style' data-class='total' scope='cols' value='none' />
            <format attr='border-color' data-class='total' scope='rows' value='#f28e2b' />
            <format attr='border-width' data-class='total' scope='rows' value='0' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#000000' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='on' />
            <format attr='line-pattern-only' scope='rows' value='solid' />
            <format attr='div-level' scope='rows' value='1' />
            <format attr='stroke-color' scope='rows' value='#000000' />
            <format attr='stroke-size' scope='rows' value='2' />
            <format attr='div-level' scope='cols' value='0' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='header-div'>
            <format attr='stroke-color' scope='rows' value='#000000' />
            <format attr='stroke-size' scope='rows' value='2' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238438064130:qk:1]' />
              <text column='[federated.0ohqyex0530aow17im6ju01eqfjz].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</rows>
        <cols>([federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names] / [federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Calculation_1229201238447734787:ok])</cols>
      </table>
      <simple-id uuid='{639A811B-4407-4C06-A676-FA7459A469E3}' />
    </worksheet>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='SVM_Test (SVM_Test)' name='federated.0ohqyex0530aow17im6ju01eqfjz' />
          </datasources>
          <datasource-dependencies datasource='federated.0ohqyex0530aow17im6ju01eqfjz'>
            <column datatype='integer' name='[Age]' role='measure' type='quantitative' />
            <column caption='Will purchase' datatype='integer' name='[Calculation_1229201238432153600]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;    library(e1071)&#13;&#10;    train &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Training.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    model &lt;- svm(formula = Purchased ~ Income + Age, data=train, type=&apos;C-classification&apos;, kernel=&apos;linear&apos;)&#13;&#10;    test &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Test.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    predictions &lt;- predict(model, newdata= test[-4])&quot;,&#13;&#10;    SUM([Purchased]),&#13;&#10;    SUM([Income]),&#13;&#10;    SUM([Age])&#13;&#10;) -1'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Customer ID' datatype='string' name='[CustomerID]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Purchased]' role='measure' type='quantitative' />
            <column-instance column='[CustomerID]' derivation='None' name='[none:CustomerID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Age]' derivation='Sum' name='[sum:Age:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Income]' derivation='Sum' name='[sum:Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Purchased]' derivation='Sum' name='[sum:Purchased:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1229201238432153600]' derivation='User' name='[usr:Calculation_1229201238432153600:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Age:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Income:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0ohqyex0530aow17im6ju01eqfjz].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</rows>
        <cols>[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{F88E48C7-EA19-4E34-BD21-F1D9877C9052}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BF4681EA-FA3B-401F-BEDC-33884C6AA9DE}' />
    </window>
    <window class='worksheet' maximized='true' name='SVM Classifier'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238438064130:qk:1]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{743C3211-13C0-46FA-ACFE-EBB5DF9CC15B}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='SVM Classifier' width='192'>
      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
      pJlgAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
