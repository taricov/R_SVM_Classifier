<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20192.19.0718.1543                               -->
<workbook original-version='18.1' source-build='2019.2.2 (20192.19.0718.1543)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='SVM_Test (SVM_Test)' inline='true' name='federated.0ohqyex0530aow17im6ju01eqfjz' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='SVM_Test' name='excel-direct.0ljzyyn1ytpj2w11y6vzj04ogfg0'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='F:/Work/MLprojects/R/SVM_Classification/SVM_Test.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0ljzyyn1ytpj2w11y6vzj04ogfg0' name='SVM_Test' table='[SVM_Test$]' type='table'>
          <columns gridOrigin='A1:D201:no:A1:D201:0' header='yes' outcome='6'>
            <column datatype='string' name='CustomerID' ordinal='0' />
            <column datatype='integer' name='Income' ordinal='1' />
            <column datatype='integer' name='Age' ordinal='2' />
            <column datatype='integer' name='Purchased' ordinal='3' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>CustomerID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[CustomerID]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>CustomerID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Income]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>Income</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Age</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Age]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>Age</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Purchased</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Purchased]</local-name>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias>Purchased</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[SVM_Test]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D201:no:A1:D201:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;' value='Donated' />
          <alias key='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;' value='Will Donate?' />
        </aliases>
      </column>
      <column caption='Will purchase' datatype='integer' name='[Calculation_1229201238432153600]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;    library(e1071)&#13;&#10;    train &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Training.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    model &lt;- svm(formula = Purchased ~ Income + Age, data=train, type=&apos;C-classification&apos;, kernel=&apos;linear&apos;)&#13;&#10;    test &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Test.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    predictions &lt;- predict(model, newdata= test[-4])&quot;,&#13;&#10;    SUM([Purchased]),&#13;&#10;    SUM([Income]),&#13;&#10;    SUM([Age])&#13;&#10;) -1'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Matched' datatype='integer' name='[Calculation_1229201238438064130]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='IF [Calculation_1229201238432153600] = MAX([Purchased])&#13;&#10;THEN 1&#13;&#10;ELSE 0&#13;&#10;END'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='1' datatype='integer' name='[Calculation_1229201238447734787]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='Customer ID' datatype='string' name='[CustomerID]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='integer' name='[Purchased]' role='measure' type='quantitative' />
      <column-instance column='[CustomerID]' derivation='None' name='[none:CustomerID:nk]' pivot='key' type='nominal' />
      <column-instance column='[Purchased]' derivation='Sum' name='[sum:Purchased:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1229201238432153600]' derivation='User' name='[usr:Calculation_1229201238432153600:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
      </column-instance>
      <layout dim-ordering='alphabetic' dim-percentage='0.45107' measure-ordering='alphabetic' measure-percentage='0.54893' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Egypt&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='SVM Classifier - How likely would a buyer buy again the next again? based on Income and Age'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#f5f5f5'>SVM Classifier </run>
            <run fontalignment='1'>Æ&#10;</run>
            <run bold='true' fontalignment='1' fontcolor='#f5f5f5'>How likely would a donner donate again? </run>
            <run fontalignment='1'>Æ&#10;</run>
            <run bold='true' fontalignment='1' fontcolor='#f5f5f5'>(Based on his/her Age and Income)</run>
            <run fontalignment='1'>Æ&#10;&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='SVM_Test (SVM_Test)' name='federated.0ohqyex0530aow17im6ju01eqfjz' />
          </datasources>
          <datasource-dependencies datasource='federated.0ohqyex0530aow17im6ju01eqfjz'>
            <column datatype='integer' name='[Age]' role='measure' type='quantitative' />
            <column caption='Will purchase' datatype='integer' name='[Calculation_1229201238432153600]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;    library(e1071)&#13;&#10;    train &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Training.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    model &lt;- svm(formula = Purchased ~ Income + Age, data=train, type=&apos;C-classification&apos;, kernel=&apos;linear&apos;)&#13;&#10;    test &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Test.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    predictions &lt;- predict(model, newdata= test[-4])&quot;,&#13;&#10;    SUM([Purchased]),&#13;&#10;    SUM([Income]),&#13;&#10;    SUM([Age])&#13;&#10;) -1'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Matched' datatype='integer' name='[Calculation_1229201238438064130]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='IF [Calculation_1229201238432153600] = MAX([Purchased])&#13;&#10;THEN 1&#13;&#10;ELSE 0&#13;&#10;END'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='1' datatype='integer' name='[Calculation_1229201238447734787]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='1' />
            </column>
            <column caption='Customer ID' datatype='string' name='[CustomerID]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Purchased]' role='measure' type='quantitative' />
            <column-instance column='[CustomerID]' derivation='None' name='[none:CustomerID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Age]' derivation='Sum' name='[sum:Age:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1229201238447734787]' derivation='Sum' name='[sum:Calculation_1229201238447734787:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Income]' derivation='Sum' name='[sum:Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Purchased]' derivation='Sum' name='[sum:Purchased:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1229201238432153600]' derivation='User' name='[usr:Calculation_1229201238432153600:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
            </column-instance>
            <column-instance column='[Calculation_1229201238438064130]' derivation='User' name='[usr:Calculation_1229201238438064130:qk:1]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
              <table-calc field='[federated.0ohqyex0530aow17im6ju01eqfjz].[Calculation_1229201238432153600]' ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Age:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Income:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Age:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Income:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;</bucket>
              <bucket>&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='border-color' scope='cols' value='#ffffff' />
            <format attr='border-width' scope='cols' value='0' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='color' data-class='subtotal' scope='rows' value='#f5f5f5' />
            <format attr='color' data-class='subtotal' scope='cols' value='#f5f5f5' />
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='wrap' data-class='subtotal' scope='rows' value='auto' />
            <format attr='text-align' value='center' />
          </style-rule>
          <style-rule element='header'>
            <format attr='border-color' scope='rows' value='#ffffff' />
            <format attr='border-width' scope='rows' value='0' />
            <format attr='border-style' scope='rows' value='none' />
            <format attr='border-width' scope='cols' value='0' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='border-color' data-class='subtotal' scope='cols' value='#f9a655' />
            <format attr='border-width' data-class='subtotal' scope='cols' value='0' />
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-color' data-class='total' scope='rows' value='#e6e6e6' />
            <format attr='border-width' data-class='total' scope='rows' value='0' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
            <format attr='text-align' data-class='subtotal' scope='rows' value='auto' />
            <format attr='vertical-align' data-class='subtotal' scope='rows' value='auto' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Calculation_1229201238447734787:ok]' value='false' />
            <format attr='color' scope='rows' value='#f5f5f5' />
            <format attr='color' scope='cols' value='#f5f5f5' />
            <format attr='font-weight' scope='cols' value='bold' />
            <format attr='font-size' scope='cols' value='10' />
            <format attr='text-align' scope='cols' value='auto' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238438064130:qk:1]' num-steps='2' reverse='true' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#d8d8d8</color>
                <color>#c0c0c0</color>
                <color>#a8a8a8</color>
                <color>#909090</color>
                <color>#787878</color>
                <color>#606060</color>
                <color>#484848</color>
                <color>#303030</color>
                <color>#181818</color>
                <color>#000000</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-width' value='0' />
            <format attr='border-style' value='none' />
            <format attr='border-width' scope='rows' value='1' />
            <format attr='border-style' scope='rows' value='solid' />
            <format attr='border-color' scope='cols' value='#ffffff' />
            <format attr='border-width' scope='cols' value='0' />
            <format attr='border-style' scope='cols' value='none' />
            <format attr='border-width' data-class='subtotal' scope='cols' value='0' />
            <format attr='border-style' data-class='subtotal' scope='cols' value='none' />
            <format attr='border-width' data-class='total' scope='cols' value='0' />
            <format attr='border-style' data-class='total' scope='cols' value='none' />
            <format attr='border-color' data-class='total' scope='rows' value='#f28e2b' />
            <format attr='border-width' data-class='total' scope='rows' value='0' />
            <format attr='border-style' data-class='total' scope='rows' value='none' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#000000' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='line-visibility' scope='rows' value='on' />
            <format attr='line-pattern-only' scope='rows' value='solid' />
            <format attr='div-level' scope='rows' value='1' />
            <format attr='stroke-color' scope='rows' value='#000000' />
            <format attr='stroke-size' scope='rows' value='2' />
            <format attr='div-level' scope='cols' value='0' />
            <format attr='stroke-size' scope='cols' value='0' />
            <format attr='line-visibility' scope='cols' value='off' />
          </style-rule>
          <style-rule element='header-div'>
            <format attr='stroke-color' scope='rows' value='#000000' />
            <format attr='stroke-size' scope='rows' value='2' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238438064130:qk:1]' />
              <text column='[federated.0ohqyex0530aow17im6ju01eqfjz].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</rows>
        <cols>([federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names] / [federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Calculation_1229201238447734787:ok])</cols>
      </table>
      <simple-id uuid='{639A811B-4407-4C06-A676-FA7459A469E3}' />
    </worksheet>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='SVM_Test (SVM_Test)' name='federated.0ohqyex0530aow17im6ju01eqfjz' />
          </datasources>
          <datasource-dependencies datasource='federated.0ohqyex0530aow17im6ju01eqfjz'>
            <column datatype='integer' name='[Age]' role='measure' type='quantitative' />
            <column caption='Will purchase' datatype='integer' name='[Calculation_1229201238432153600]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_INT(&quot;&#13;&#10;    library(e1071)&#13;&#10;    train &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Training.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    model &lt;- svm(formula = Purchased ~ Income + Age, data=train, type=&apos;C-classification&apos;, kernel=&apos;linear&apos;)&#13;&#10;    test &lt;- read.table(&apos;F:\\Work\\MLprojects\\R\\SVM_Classification\\SVM_Test.csv&apos;, sep=&apos;,&apos;, header=T)&#13;&#10;    predictions &lt;- predict(model, newdata= test[-4])&quot;,&#13;&#10;    SUM([Purchased]),&#13;&#10;    SUM([Income]),&#13;&#10;    SUM([Age])&#13;&#10;) -1'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column caption='Customer ID' datatype='string' name='[CustomerID]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Income]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Purchased]' role='measure' type='quantitative' />
            <column-instance column='[CustomerID]' derivation='None' name='[none:CustomerID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Age]' derivation='Sum' name='[sum:Age:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Income]' derivation='Sum' name='[sum:Income:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Purchased]' derivation='Sum' name='[sum:Purchased:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1229201238432153600]' derivation='User' name='[usr:Calculation_1229201238432153600:qk:2]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]' ordering-type='Field' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Age:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Income:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[sum:Purchased:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238432153600:qk:2]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0ohqyex0530aow17im6ju01eqfjz].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</rows>
        <cols>[federated.0ohqyex0530aow17im6ju01eqfjz].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{F88E48C7-EA19-4E34-BD21-F1D9877C9052}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BF4681EA-FA3B-401F-BEDC-33884C6AA9DE}' />
    </window>
    <window class='worksheet' maximized='true' name='SVM Classifier - How likely would a buyer buy again the next again? based on Income and Age'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0ohqyex0530aow17im6ju01eqfjz].[usr:Calculation_1229201238438064130:qk:1]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.0ohqyex0530aow17im6ju01eqfjz].[none:CustomerID:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{743C3211-13C0-46FA-ACFE-EBB5DF9CC15B}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='SVM Classifier - How likely would a buyer buy again the next again? based on Income and Age' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9d3Sc93nv+ZneMQAGfdB7BwGiEyBAQiApikWyou4WJ5t+c+3dk/yxyWbX
      92z2rq/vxk5yY0dJFMeWLFqyZFmdFCF2EASJRqL33oEZzGAapu4ftGFbgBOKpvgOL+dzzhyQ
      KO98n5nzzPu+39/zex5RIBAIECLEQ4oU4Lvf/S5Xr14VWkuIEPcdKUBrays//OEPhdYSIsR9
      Ryy0gBAhhCSUAP8BYVFGinPShJYR9EjV4aQZDULL+NRIhRYQ7Dzzh/8bzxRqeeyFP+WFP/4q
      8WITp85284Unj/D6S//A4JxJaIlBQVhGBX96JJz2DSPZcQq+/8+vcPJLX2Hw4rskVRzCv9DF
      iElH474CbNZNXKsjdC4pOFqRxN///XfYcPoE0R1KgH8HkVhBU20ZToWMkyeOUpfoxRNdz5dS
      64lmg6MHKhl8+bTQMoOKuqpiJlbcfOVPfhfXZAebmkJy9JtI8p4ldd3KzPg0BbkaNHlHqYpO
      xba8SE1OEh/2TAmiN3QJ9O+giM5m+OIp/q//+nfEGdRIk6vZmxHF1SsXMMRGs7C4KrTEoMHn
      srG4ZmFmfIiRkVF6rpwjs/EFssMsqNL2IVsfZHR8ioHBIfoGBpmYHOfi1R5iwqSsWOzCCQ8E
      AoEXXnghAIQe/95DYwz84/dfCfzjN/48IJcEgZ7Q4548gu4SSK1WExUVJbSMXfl//o//HYA4
      Y7LASkLcK4IuAQ4dOsT3v/99oWWEeEjYNQFS8sooSQ3nzNnzbHkDv/iBSIxSLsW15b6jgyvD
      Ymg+WMdo1xXEMTnEyTa51j9LTVkuH19ovScB3C9GRkaIiIhgaGgIl8vFwYMHkUgkQssKKsbH
      x+np6SE1NRUAp9NJbW0tLpeLixcvsnfvXqamprDb7ZSVlXHlyhXKysqIj48XTPPOBJBF8dSR
      Mv7xxVMkpmZjXreiVYooqKhi02bj6cca+Ju/eZHCinL6r18iqbAWncSDTCnh4vkO9h+oob39
      BtlZmZjWFunsGuXZJ5/GbV1hdiuPLJOJ0vLyByoB3G43HR0dFBUVYbfbaWhoQCwO+QefJCMj
      A61Wy+rqKtHR0QwNDbG1tcXw8DApKSl0dHRQVVVFR0cHGxsbVFZWMjIyImgC7HwXpUr8zk3s
      TgeFeypJNOZSmldEYV4WEq+Vrs4OEsqaWBns4LEnnqQgI570rEw2ZMn88R98nsSoWEqr93Ow
      MJbZ9QC/dbKGV9/8CJ/Lid25hdOyhtWxJUCod8+ZM2fY2NhgZGQEnU7HW2+9xdbWgxXD/WJ4
      eJjc3Fzm5ubIzMxEpVKRn5/P+vo6FosFm82Gz3fb8x8ZGaGyslJQvTvPAM452sZdPPPEURat
      FvaUJjJ8qx/l3AJ+lwunOAzLZC8VNY/Q034FiTYKqVjMnEXER+N2CgsymZ+e4OKUCWNWJg6T
      lXSDhNFNFTHyNaYj8tCo1JTnp9MxMCFAyJ+e48ePs7GxgcViYWBggMjISGQymdCygg6fz0ds
      bCwAQ0NDLC4usrKyQmxsLKurq1RUVDAyMoLb7WZxcZH5+XmGh4cpLCwUTLMoEAgEPv/5zwdN
      Mdzjjz8eugn+n4iNjQ30ej0ikUhoKbsSdC5Qe3s7L7zwgtAyQjwkBF0CVFVVhc4AIe4buyZA
      1cFjpOr9vPvBaRxb/u3vi6Ry4qPCWVhauaODRxizefRANfOD1xHHFRIj2+TG0Cr7KgvpbTtL
      z+jivYniPtDW1obRaGRwcBCRSERTU1PIBv0Edrud06dPU1ZWxtDQEFqtlrq6OkwmExcvXqS4
      uBi73c7CwgJlZWV0d3dz5MgRQTXvTAClkdocLX/34usU7qlgddFEdISSvD3FLK+v88ShOr77
      Lz9mb3kJo7faSCnej1bqxy8JcPV8O2VVe+nr66W8pIDWiy1cvjHG8Uf2E7AsMeaKR+3qoHs8
      joLM5AcmAaxWK0tLS6jVamw2G3K5HJ/PF0qAT9DV1YVer0cul2OxWFhdXaW0tJTFxUWUSiUd
      HR14PB4KCgqIiIhAr9cLLXkXG9TvRqLUoFAoyczOw5iUSUp0NDHxCWjEbm72dBORVcbI9fNU
      1B1ArwygUskZXVfwzDMniNPIiDBmEuFfY1OdzvGqOL736gdI5ArUSjkphfspi3bw5pnrAoR7
      d7S3t7O6ukp/fz9qtRqxWIzX6xVaVtAhk8lISkqiu7ub5uZmdDodEomEnJwcSkpKUKlU6PV6
      nE4ni4uLQbGWsvMM4F7lJ2dv0XyghuGRYdLj9QwNziGKimB8eBh7oJSlgQsUVVTy0btvIw+L
      QiIWs2KHhU4reyvLWZ7op2XEikKViNkloTRVw8X+VWJlE6z6ItAmGsjPTOTWyKwAIX96mpub
      sdvtOBwOhoeHEYlEKJVKoWUFHWVlZXz88ceUlJTQ29tLdnY2fX1920lRV1fHxsYGk5OTBAIB
      JicnkcvllJaWCqY56GzQxsZG/st/+S9Cywhxj3C73cjlcqFl/FqCzgVaWlrizJkzQssI8ZAQ
      dAmQm5vLn//5nwstI8RDwi4JIOb4c19G517l7fc+wL71i72aEoWGvIwE+gZG7+jg0alFHG2s
      wrE8jDg2j3CJgys3RikvL2G27wLnro/cqzg+U+bm5jh37hw1NTWMjo7icDg4efJkqBziEyws
      LNDS0kJ1dTXj4+PYbDZOnjyJy+WipaWFw4cP4/P5eP3112loaKCzs5O8vDxKSkoE07wzATRJ
      ZGjMfPvUu9QfOMLC1DJJcTpKq0vpHxnl2MFafvD6x5SXZDI30UdK0X608gAOf4Ce1hvU7N9H
      R8d1akvzePWHL9MznkphahJa1xwjrkhkrjWkujBEPmE2Qd8Na2tryGQydDod+/fvp7u7O2iX
      9oVkbW0NqVSKTqejvr5++3UKCwsjNzcXn89HX18fMTEx+Hw+AoEAfr//Pz7wZ8jOBHCZEYcb
      SU9JJiExGbVCj8KxhEeiJlIpYnh4BGV0EuO9N8gq3oNrc4WAVEL3kpj9taU4liaw+lWsj/cg
      TqmlIUXMD05f5gu/9QiJPjXWURFtV7uoSk+DznEBQv70xMXFERkZSWdnJ36/n8rKyqCw8IKN
      2NhYwsPD6ezsBKCiogK/38/W1hZmsxmFQsH09DSjo7evIEpKSpidFdYJ3JkAPisv/eBtcpMj
      uHShBWOUlunZZVa8HiYGbxGZmMX63BQpObm8duo15Bo9YpGITbeIwY9t5BUXMz8xxoLHyZY8
      gh5ZMonhAX78QSuRUgdLDin5egc/eb9TgHDvjvDwcLq6umhoaKC3t5eJiQkMBkMoCT6BXq+n
      u7ubhoYG+vv7mZiYwO/3k5WVhd/vx+Fw8Nxzz2EymVCr1fT09FBbWyuo5qCzQUtLS/md3/kd
      oWWEeEgIOhdIoVAQHR0ttIwQDwlBlwBxcXGCF0iFeHjYJQHk/O5X/zOO2aEdNqhUHc6+0kwu
      tnbc0cFj0ot5dH8tWtYQGdJRscVLL77EH/zf36brpa9zuvfBKIWYm5ujra2NsLAwVldXUavV
      nDhxAqk06D4/BOeVV16hoKCAmzdvkpCQQFNTE0tLS7S0tJCQkEAgEKCvr4+ioiJMJhO5ublB
      ZoOGJaKxDPMvb77LsSeeZ3JojqzkCA4ered0y3mONNYg0qZSkmnAsr5AclE9OnmAdXeAie5e
      Tj55kg/ef5uqwjT+5u/+kfUtD0sWByn2W/S5DRx54gkGux6cDfEARqOR1NRUoqOj2dzcZGlp
      CZfLhVarFVpaUDExMUFmZiZSqRSFQoHX6yUQCLCxscGJEyfo7e2lpqYGlUpFdHQ0ZrOZyclJ
      QRNgp41hXWArIotjhw6gj4yitm4PftcGcxs+EsKkzK1sgESKw2ZFKpczPznI5PgoF29MEBUu
      58qHP6Fv2kxf23kMZccoj4HlmRnkxjz2pEexurRMbGImaSlJAoR7d1y/fp2ZmRk8Hg8JCQnE
      xMSEiuF2YXNzk4GBAQYGBoiLi8NisbC8vIxCoaClpQWv18vY2BiZmZkYDAZUKhUpKSmCat7V
      BZLIFKiVUrbcPhQyCa4tNyqVCqfDjkyhwrPlQqlW47TbEEtun0R8ARD5fag1WlwuJ/h9+MUy
      NCoFXrcLj1+MVOTH4dpCJJEiCfjw+gM7BAXjnmC3243D4UChUODz+ZDL5UFd4CUkfr+fQCDA
      1tYWIpGIyclJsrKy2NraQqVSEQgEkEgk+Hw+HA4HOp1O0EXFXS9ifZ4tNj232364f9b9w+Px
      3P7qtd3+arX+7Jd/tUmW1Wr55SNhcbu2//fz3wz4vPy6avpbt27xZ3/2Z3ceQYgQvwFBdxeX
      lZXF1772NaFlhHhI2DUBNOHRJMeGMTI6ju83KNUQS5VkZ2ewPDOGSBODTuJi0eojNz2R5flJ
      ltc3d/yNSqUiISHh7p/0M8Dn8213NzOZTCiVytBaxS54PB4GBweJj4/HZrMhlUpJTEzE5/Mx
      MjJCeHg4MpkMu91OSkoKFosFuVyOWq0WTPPOBBBr+crvPM+VM2eJjIjEanMhk0CMMREfUh47
      UM4rP/wJ0QkJLM9NoY9JQiHyIZGJmZpcIC0jmdmZOcIjIlDpI4nQx3HkS1X4kGL3yTFvbOJe
      7GVu6sEphltZWcHn83HhwgX8fj9SqZSmpqbQfcAnmJycxOl0IpFIcLlc9Pf3b7s9y8vLREVF
      0draikKhQKPRcPbsWQoLCykuLhZM884EUEch2Zimu2+AE09+nonBWbIS9VQ2lvPRxx+j12kp
      aTxJbGARw/4KwqKTUcmlTFp8HHKZSMvM4UZPF5Xp4XzjxTeo31/PxevdVKaHM7llIMxnJi6r
      kkqfh9NXegUI+dNjMBgYHx+npqaGjo4OxsbGgn6nkxCoVCp6enq2t4yKRCIkEgkymWx7T7VY
      LMZkMnHr1i10Oh0bGxuCat6ZALZZ5v1HeP7J47gUKvY3FDN2s5uFjS1iNDLsfgW+TTOx+Zms
      zI+xYdtCJpXQvyImQ+3A77ExNLmEeHmApIomjDI3o347Tn0ZhRIX13pshBn8iB+gcuKuri5m
      Zma2uxgkJiYKetoOVvx+P2KxmK2tLZaWlnC73UxNTSGXy7edH5/Ph0gkIj4+nrW1NcHLyoOu
      GC4YbdAQd8/09DRJSUlBWzkbdC5QqDViiPtJ0CVAqDViiPvJrgmQkFFIWWYUZz+++KsTYhAh
      lYjx3uF2Rrkmkkea6hnuuIw4Ovv2hJi+WQ40NTLaeZHJJct/fJAgYWJiAr1ez9jY2PYWP6Gv
      X4MNp9PJxx9/TG1tLQsLCwQCAQoLCxGJRCwtLeHxeJBIJAwMDJCYmEh/fz9ZWVlB5gLJInnh
      8X28+OIPiU9KZ8O0iVoBhRXV2OwOnj3eyH//5nfIryin79qFn02IcaNQSjl/oZMDTbW0XW0n
      IyMDp32Dnq4xnnvuBdyWVebder5UqWTg3I9ZtjgFCPfu8Hq9XL16lczMTGw2G1arlbS0tFA9
      0Cfo6uqipKSE69evI5PJtu1QuVxOW1sbMTExmEwmmpqaUCqVREZGsrJyZ31mPyt2mRCjxbu5
      jtVmo7ishkRjHhVFZZQW5SH2WOjs7CCx4hCmkW4ef/pZSvOSyS0owKbO4Kt/8iWSYoxUNzzC
      scpUJhddPPVbjfzoJy147JtsbDpJMMaQV3WI5442CBDu3fH+++9jsViYn59Hr9czPj6+PeUk
      xC+IiIigu7t72+dXq9X4fD7a29uZmZmhv7+ftbU1fvrTn7K0tMTQ0BB5eXmCat5lQswMXfNV
      PP/kcZadTiqq0hm+2Yd6fhFZwI9PHsnmTB9VdYfp77qGWBOFTCJm3izi/IyD/LxUZqen2Zpe
      J7WoENe6iZRwmHaHk6S08q8vvcqhA9UMjT4Y02EATp48idlsxmq1Mjw8TE5OTsgG3QW1Wo3b
      7SYiIoKVlRUCgQDT09OUlJSwZ88e5ufnMZvNzM3NoVQqiYuLE7zBcMgGDfGZsr6+TmRkZNDe
      LwWdCxSyQUPcT4IuAUI2aIj7ya4JUFp3mEyDiPc//AiH+5cmxEhkREfqWFk13dHB9XEZHDlQ
      zWx/O+K4AmJkmwzMOdhTkMfa5HVa2vrvTRT3gRs3bhAVFUVvby92u53Pfe5zKBQKoWUFHZ2d
      ncTExLC4uEhcXBzJyck4HA4++ugjCgsLcblczM3NkZKSQn9/P0ajkZqaGsH07jIhJp4DJVH8
      /YuvkVNQytrSBga9nPzSPayazXzucB3/8OIpysr3MNxzlZTierRSH0hFXDnfTkVNOTdv3aSs
      KJ/O661c7RjjxOEmApZlJlwpeJd+xHxaLu6VZQHCvTtsNhszMzOoVCqOHTvGlStXQn1Bd8Fu
      tzM9PY1MJiM5ORmT6fYH5eTkJJWVlfT397O6usqePXu2jQSh3bRdJsT4EUtlSKRSsnOLMCZl
      kpGQgDEpERUubnZ3YcitZLzzErUHmokOkxGm1zFp1fD5F54gXqciPq2ARIWDDamRE3UpfP9H
      HyKSSJHKpCALoyxJRsf4mgDh3h2tra2sra0xPDzMxMQEqampQVvbIiRXr15ldXWV4eFhVCrV
      9vdFIhEej4dAIIBKpWJ5eZnZ2VmmpqZITU0VTjC7TohZ5t1LozzaVMfE5ARpRj3DA9NIoiOZ
      m5rCJw9npf8KJRU1nD/9PrKw24OyF20iVm5aKS0vZWlykI9HN9BqkrE4oDhJRduYhVjZHMtO
      ORfOnuZBctEPHz7M5uYmTqcTp9NJYmKi0JKCkubmZmw2GzabjatXr2K32zGbzeTl5dHe3k5R
      UREOh4PJyUkMBgNSqVTwD5Kgs0EfeeQRvvGNbwgtI8Q9wul0/srZINgIOhdoenqal19+WWgZ
      IR4Sgi4BCgoK+PrXvy60jBAPCbskgIgjT32BSL95R2tEsVxNdmocQyN3VsYQlVrI0cYqrHP9
      iOPyiZTY6Rxap6o0nf5rLVzueXDKIc6cOUNKSgoDAwNotVoeeeQRwa9fg43FxUVaWlqoqqpi
      YGCAQCDAsWPHcDqdnDt3jkceeYRLly7h9XopLy/n2rVrfO5znxNU8y4TYpLJ1dv49r+8S219
      M4szKxhjtBRXFDM6Nc3xplq+d+oMFaU5zIzeJLloPzpZABcBOi61U15bya2bPdSWFfDj117l
      xsA8VQXZKJxLjNgM5OckoVFpiIwIEyDcu2N1dZVAILB9g7e8vExtbW2oNeInWF5eRiKRoNfr
      2draQiqVEggECAsLIzs7G4/Hw+bmJjabDb/fj9FoFFryLjaoy4I0Ip742BgSk1NIycggUiUF
      pY4IBQz096OOz2DoxmUy8orxOU04HVa6Juw0Ne1DsrmCS6pnc6aXgLGCA+liXvtJC3J9FHGG
      MCINEbReukZMfHC1Pvn3GBwcZH5+nunpaU6ePEliYmJoQ/wuJCQk0NzczOXLlwkLC0OtVuN0
      OvF6vTidTnw+H48++ihJSUloNBpcLhdbW1uCat5lQswG//rDDyjJSqWt7QopsWHcmJhnUy5j
      uOcGUWn5rE6MkllSwo9P/QiFLgKxWIzVBcMXNtlTUcHSyADvue24lNFMGNLJT1Tw1sfdRMts
      DC7YqC0v5I23WwQI9+7Yv38/lZWVuN1uBgYGKCsrCyXALuh0Oq5evcrhw4eZmZnB7/czMDBA
      SkoKa2trBAIBZDIZ6enpuFwunE4nY2NjFBQUCKY56GzQ8vJy/uiP/khoGSEeEkJ3cSEeaoLO
      Bk1MTOTJJ58UWkaIh4RdEkDGl/74T/Asje2cEKPSU1WcTmt79x0dPDq9mKP7a1B4lhAZMtCI
      t5hadRCrVTF4/TQXuh8cG/TVV1+lqKiIhYUFjEYjhYWFQksKOiYnJ7lw4QJ1dXVMTU0RGxtL
      cXExU1NTXL16FYPBgEgkYmBggJqaGoaGhigqKqKsrEwwzTsTQJdIuHOcv33zXR49/jRTI/Nk
      JkWw/1At5y638mhjDRJdCnuyYzCtzJJUWE+YIoDZHWC08yaPnjzK2TMfUl2cwf/4zj+xsOlE
      7glg9AzQtWUgKVyM2+ejqLj4gUmAyclJUlJSEIlEVFdXs7CwILSkoOTnMwDg9r6Oubk5AORy
      +fZchbq6uu05Ac888wwdHXc2buuzYpfWiEt4wh+naX8NEVExREca2JgcYNkWIF4rYWZhFZFc
      zcbaCiqtjpW5USw/G5RdnhBOz6UzjC7Zidy6jL74CFVxIt5sGSXtyCMUBkRcOnuW9NI6FqcG
      BQj37jCbzQwNDaHX6zGbzSwtLZGZmRkqif4EWq0Wo9HI1NQUy8vLLCwsEB0dzerqKlFRUVit
      ViYmJkhPT8dkMtHS0iJ4l+1dXSC5SkuEVsGm04NGKcNmcxAWrsdqXkeh1bNl20QXHo7VtI5Y
      JkckAo8P8HmJMBjYtFrA78UvURCp1+GyW3H5pShEHuweERFaBatr6+wyICZo9wT/vK+l2WzG
      7/cTExMj+IbuYMPr9bK2tobBYMBkMuH3+1leXiYvLw+LxYJOp0MsFiOXywkEAtv7hYV8HYPO
      Bs3KyuKxxx4TWkaIh4Sgc4FSUlL4whe+ILSMEA8JuyaAShdObISGmdn5XS9T7hSRRE5yshHT
      0jw+qQZZwMmmK0CiMZbFuVk8vp0H12q1ZGZm3v2TfkZsbm4ik8m2p5pEREQILSno2NraYn5+
      noSEBDY2Ntja2iIpKYlAIMDMzAw6nQ6DwcD6+jp6vX7bURNy3vLOZxap+cr/8mW6L1/Eat1k
      0+5GKg4QHhVDQKrgSP0efvzG++ijDJhXl9CExyAT+ZFIRCwurROfEMPKyio6rQ5tVDzpxlQe
      P1jKLXMYRvcI06IMjKotPNmxvHn2hgAhf3oCgQBvvfUWOTk5LC4uIpPJaG5uDpVDfAKLxcLq
      6iqTk5NYLJbtEofV1VWGhoYoKSlhdnaWt956i8rKyu17hMrKSsE070wAbSyyjUmu3uj+xYSY
      pHBqmyo5ffZjUpKT2HvwCZKUVjR6LZHGbNRyMTNWP2LzEiVlZVxpu0plpoH/9t1TJOyvo+3y
      O4w6w4kp1BMbr+Pij89y7LFa4MFIgK6uLuLi4vD5fCgUCiYnJ0MTYnbBYDBw5coV0tLS2Nzc
      pK+vj7S0NCQSyXZXvc3NTWJjY4mJiaG7u1vQT3/YrRRic5YVaRLPP3kchUZH44FSXHYzCxYv
      8WEyNj0S/C4bkbEJbG6YmJ0cYXJ8jJ7+SWzWdfo7rzAwtURX2xWMlYfJ1PiR6qKoq6+juGQv
      S1NLPPPlp5kYeTDGIwFERUVtVzRKJBLi4+NDrRF3YXJykkAggNlsRiaT4Xa7mZubw+FwIJVK
      cblcJCQkYLFY8Pv9eDwecnNzBdUcdC5QsNqgIe6OyclJkpOTg9YyDjoXKNQaMcT9JOgSINQa
      McT9ZNdy6OikbI4270cu+c06+kqVeg4/dpzk6DDiUnLJSDQgUWioLN/zGx1XCGZmZjCbzVy5
      coXu7m4Cgd/AH/6flI2NDd555x3MZjMzMzNcuXIFv9+P3W7ngw8+YHFxkd7eXt577z3MZjM/
      /elPGR8fF1TzLgMyIvjys49wtb2HWGMyYbooYgwGGpuPUFl/gG/9t6+TGB3DwUOHiYvQsrf2
      AA31dRxqbkCl0nP40cNERBrYU7qX/Jwk+m6O8/RTx0jJyaOyJIcIQxRNTQcECPXu8fl8XLx4
      kdnZWQoLC5mbm8PtdgstK+iQSCTU1dVx7do1bt68SWVlJSKRCJFIRE1NDV1dXZhMJo4dO8ba
      2hoVFRVkZGQIqnlnAsh1eDeW2bBaKa2oJzmpgNrSKqr3FiPz2+jtvUVy9VFcC6M8+dxz1JTl
      UlpeTiC6kK/9yVfIScth/yOP8nRjPlPzm3zuyYP8+PV3GBkewQ+sLUyzvvngjEcCOH36NFtb
      W0xNTTE9Pb39pob4VdRqNW1tbURGRjI3N8epU6ew2WwolUo6OzuJiIhAIpHw8ssv4/V6aW1t
      5fLly4Jq3nkP4Jihd3Ufzz95nDWPh6qaLEZu9jK/akIjEeNXROKYH6Ci+iAjvZ1INFFIJWLm
      TCK8sw6yMhOZmprBPbNOakkpfssGxrQMCtJKSIqRUFwWICrSQHl+Oh0DD0Y5dHNzM6urq2xs
      bDA2Nobf7w8lwC5MTk7icrmQSqXk5ORgtVqZmppCqVRur6B7PJ7tkmmxWExkZKSgmkM2aIjP
      lJ+XQgfrB0bQuUAhGzTE/SToEiBkg4a4n+yaAIVVB8iJkfHB6Racnl+eECMlIkyDyXxnA651
      0SkcPljDdO81PBHZyMxDzNi1NNYUc/NqC0MzD8aMgKWlJa5evcrevXtZW1sjLi4uKLqaBRsr
      KytcvXqV2tpa+vr60Gq1VFRUYLPZuHDhAllZWZjNZtbX16mqqqK1tZXa2lpiYmIE07wzARRx
      HKpI5B/+6TUycopZW94gQicjf28ppg0LTx6p5++/8zJ7yksZ6m4luagOndSHSCri8oXrVO+r
      oLu7h+KCXAb7urnWMcYT+4t5v9tEZVoiQ1cGuTmewN49OQ9MAoSHh5OamsrCwgKJiYlYrdZQ
      AuzC8PAwycnJXLp0CYlEgslkoqCggJWVFcLCwlhcXGRjY4Py8nLGx8epq6tjYGBA0ATYdSFM
      JIIAkJNfQmJSFjnJKaSmpqIIOOjp7iK6oJbpnlYamh8lMUpDVLSBOVcEv/3F3yJBH0Zq7h5y
      IgOs+SJ5/EAOL7/2IWazmQAQnV5CXaaSNz9su7+R/gYEAoFtByMs7MHpaXq/KS8vRyqVolQq
      KSsrw+PxIBKJ8Pl821Pj8/Pz6enpYXV1VWi5wG5ngK0lzlyf4/jhRqbnZslI0zPUN4JsZpq1
      hUVkuljWBq5RWlHHlY/PINNFIRGLWdgU8WbfJnvKiliYHObc2AbhhhSsNg/5BflojTnodJCK
      H4c/QHaakVsjswKE/OlZWVlhZGSEkpISrly5gt1uJy0tDaVSKbS0oMJmszE+PvunHR0AACAA
      SURBVM6BAwfo6uoiOzub4eFhYmNjGRoaIi0tDZPJhFwup7y8nMuXL7Nv3z5BNQedDXr48GG+
      /e1vCy0jxD3Cbrej0WiElvFrCToXaHR0lG9961tCywjxkBB0CVBcXMw3v/lNoWWEeEjYNQGa
      Hn+OWIltlwkxKtIToxmbmLmjg/98Qsz6RA9b0YWIF64zatFRX1nMWFcLV29N3ZMgPmuWlpZo
      aWmhurqa6elpxGIxDQ0NoQkxu3D+/HkSEhIYGhpCrVbT1NSEyWTi4sWLJCQkIBKJMJlMFBcX
      c/78eWprawUtiNuZAOpkiqLdfPuf36Wy9gDLs6skRGvILy1kenGRE021vPTy+1SUFzA52EFK
      cQNaWQAPftovXqOkvIyBwT727S3mp2/+iNaeWA5khfHm9Q4OFUaweGscyYEalLKgO/n8Wubm
      5hCLxYSFhTE0NCRoL8tgxmQy4XA4sFqtbGxssLi4SHV1NZGRkWg0Gvx+P0NDQ6Snp7OysgIg
      eC3Qzo8w9yby8Fj0YWGkpKaRkJJGtEaJTKtHLw/Qe+smmuRceq98RN6eSkQeK163g54ZN48d
      ewSd30ZAHcPWwiDe2DKaMiV8743z24dXqfycPttGerawZbCfhpSUFE6cOEFrayuZmZm4XC42
      NzeFlhV09Pb2srS0xNTUFM8++yzJycnI5XLsdjt1dXWsrq5iNBqJiIjA5/Nx7Ngx2tqEtcN3
      fgx7zXzvRy3sq9pDR8cNMo3hdA9P44vQ03vtGrHZe1gcuUR+RQVvnnoVZXg0EpEIswvGLlmo
      qq9nbbyHD7dseFSxrAdyqSovQRWdglfqIzYukdz0aH763oMzIUatVnPu3DmamppYWVnBbDaH
      1gN2oaGhgaqqKlwuF+3t7eTn59PR0UFaWhqdnZ1UVFQgEokYGxtjz549XL58mfr6ekE1B50N
      Wl1dzde+9jWhZYS4RwQCgaCtBIUgdIGuXbvGM888I7SMEA8JIRsjxEPNLmcAKc//3h/A+vQO
      G1SiCmNvfirXO2/d0cGj04o52lCDeHOcRXkGelMXr7X08dWv/1du/vCbnB+cv1dxfKYkJydT
      W1vL/Pw8GRkZLC0t8dFHH+H3+//jP36IKCwspKSkhKmpKTIzM1lZWeHMmTMkJSXR0NDA0tIS
      arWa8PBwOjo6qKqqoquri+7uO5s49Fmwiw2aQCyLfOvNd2k++jlmRhdIipZS2tjEwswQVaVF
      yHTJlOYlsLowcXtQtjyAxRtg6Fob0fFG+iameKKhlJdPvcHAxDTxojXapxY5VKinsvkJ9HI3
      xtgoeEASYH5+Hq/Xi9VqRSqVYrfbg/q6Vij8fj8+nw+v1/srr1MgEMDr9W7PBBgZGaGwsJBT
      p04J2hcUdt0TPMe47RGef/I4m2IdjQdLGe25iWXTin11kYHJaNxbTnz+AE6nk9H+DmQSCcNr
      IpKVIpRiNx5vgM7LLagyq2lIVXO1a5HamiqyEqS0v/kh7wW2MGw8ODZiZmYmEomEsLAwVldX
      iY+PDyXAr0EkEqFQKLZfp6ysrO3vw+3u34mJiVy/fp1nnnmGa9euCSkXAoFA4IUXXghwuwI6
      9Ag97unDaDQGRCKR4Dp+3SPoXCCNRkNcXJzQMkLcQ9LT04WW8GsJugRobm4O7QkOcd/YNQHS
      CyooSgnjzEfncHkDv/iBSIxaKcfhdN3RwVX6OJqb9jHe3Yo7LA2lfYo5dziHawq5deMyAxNL
      9ySIz5rV1VVaW1uprq7GZDJhMBiIjY0VWlbQMT4+Tk9PD8nJybjdbrRaLcXFxbhcLi5cuEBu
      bi5msxm3201VVRUjIyOEh4cL+lruTAB5NJ9rLua7L54iMT0H8+omOrWIgvJKLJs2nn5sP9/6
      9j9TWL6XgRuXSS6sRSf1IlWIuXi+g/rGaq5f7yA3O4vlxRk6O8d4+lAdH/VbKEhMwyDPZn74
      AqPTywKEe3doNBqKi4sZHh7GaDRiMplCCbALGRkZaDQa5ufnsVgsbGxskJWVxezsLNHR0QwO
      DuL3+1GpVMzMzHDr1i1yc3MFfS13LoSJ5fi37Di3XBQUV5CYmENJTgF5OZlIfVa6ujqJ33OQ
      5YEbPHryCXLTYkhJS2VdbOSPfu95jIZoiiv2UZcTybxFwpPHKvjha++yML9AABjqukpYej3P
      Hhe2BuTTIJVKWVxcRKlUCj7XNtj5+dbRlJQUlpeXCQQCyGQy1tfXkclk5ObmsrCwwLlz57a3
      mgrJzjOAa57WYRtPnTzCgtlMUXEcw7cGUczN47bZsPs1bIz3UF59kK62S0g0BqQSCXMWER+O
      2SgqzGZ+aoKLkybi0zKwb9jIzMklLKmAqEgRRrMMvTJAb8eYAOHeHbOzsywtLZGbm8vly5fZ
      3NwM7QneBZ/PR1xcHBKJhMXFRXJycpiYmECv12O320lOTmZ5eZn4+HiampqwWq2CV9UGXTHc
      iRMneOmll4SWEeIeYbVag7pyNuhcoM7OTn7/939faBkhHhKCLgEqKir43ve+J7SMEA8JuyZA
      TfNJUnRe3n3/Q+xbv9QaUarAGBPO3MKdOTiRibk8eqCKhaEOfDEFsNjFrWURjz9SQ/vF9xmc
      Wr83UdwHWltbSUhIYGBgAJ1OR319fagc4hMsLi7S2tpKQUEBk5OTaDQa6uvrsdvtXLlyhcbG
      Rtrb27HZbOTm5nLz5k2qq6sF7bK3MwFUiVRnKPnbF1+nuKya1UUTMRFK8vYUsbS+zuPN+/jH
      l96kvKKYsd52kovq0cr8+MVw9fw1SivL6B/oo3JPIRdaPuTyjTEe25vIm+0jHMiJIbq8HvdS
      B6aNB2dIxs8HQMvlciwWCysrK+zduzeo+90Iwfr6OhqNZnuWwsrKCmVlZWg0GhITE/F6vczN
      zVFUVMTy8jIqlYqenh5BE2CnDep1IVXrUKnUZGTlYkzKICkqEkNcPBqxh1s93YRn7mHo2jnK
      avajk/tQyCUMrUp46qnjxKqlhMWmo3UtYtdl81h5FN977SM8Hg8ALqeN+VUnT544dL9jvWuu
      X7/O6uoqMzMzHD16lIiICMEHPAcjFouFvLw87Hb7r7xOYrEYiURCIBCgsbGRtbU1kpKSyM/P
      3x6WIRQ730XPGq9/2EVTQxWDgwOkJ+gZGJwFQwQj/f1Ys0tZHOygsKKCD99+C0VYFBKxiFWH
      iPnrVvZWV7I80cdZjxWZyoh5S0ZZaTGa2HQkqgAdZ9+isrqS90+fFyDcu6O5uRm73Y7L5aK7
      u5u8vLzQlPhdKCoq4sKFC5SXl9PT00N2dja9vb3Ex8fT39+/fYaQSqUoFAo6Ojo4cEDYeXFB
      Z4M2NDTwV3/1V0LLCHGP8Hg8yGQyoWX8WoLuPL66uir44LQQDw9BlwDZ2dmhrhAh7hu7JICY
      xz//FdTO5Z17ghVaCrKM3OobvqODR6cVcbShGtfKEGZtNqrVTvrXldTV7GNr5jKnPrx+r+L4
      TJmbm6OtrY2UlBQmJyeJjIzk4MGDSCQSoaUFFUNDQ/T29lJUVERERAQfffQRX/jCF5idneXq
      1atkZ2eTnp7Oa6+9xtGjR2lpaaG+vj7IWiNqk0lVrvPtV96loeko85PLJMfp2LtvL7cGBnns
      YC0vv3Ge8uJ05icHSCnej1YWwOEPcPNqB/sa67l+vY2aPXm8/PIP6JtaIVvl5kb7NQ4V6hk7
      f5WCsr0M3OgVINy7w2g0UlxcjEgkwmq1kpiYGFoD2AWXy4VYLKavr4+YmBiioqIA2NraAqCv
      rw+n00l8fDwbGxtIpVLUarWQknexQR0mROGJ5GSmE5eQRHZ+DlppAJdIiUElYmR0HKXByNRA
      D8bUTBwbS1jMa1wfNlNRUYhldhiTW8HqaCey9H3Up4g5e20QQ1QUEeERaAxJpMjNjK49OOsA
      w8PDmM1moqOj2b9/PysrK7hcd7Yn4mEiKyuLwsJCNBoNs7OzdHR0YDKZSEhIoLy8nMjISGZn
      Z+nu7kYkElFZWUlvr7AfhDvPAH4rL/3bm2QZw7nw8WniDBrm51eZdzmYHh4gPCEd88IsSZmZ
      XHv1NeSaMEQiEXY39Lc4yM7PZ25qkjmvE7c8gnafkShDJHIc3By1IfM7OfXG2wKEevdERkZi
      NpuxWq2IxWJKS0sF96+DkUAggN1up7m5GalUysbGBqOjo2RmZmKxWGhqakKpVLKxsYFCoWBg
      YIC6ujpBNQedDVpSUsKXv/xloWWEeEgIOhdIrVaTkpIitIwQDwm7JoBIJEYiEeH1+nb78ad7
      AqkUn88LiBERwB8AqVSCz+slsMvvx8bG0tTU9Bs/773ml7vA+f1+JBJJ6EZ4F37+OgUCt9/d
      n5dA+Hw+xGIxPp9v+/s+nw+pVCro67hLAsj53f/8p1gm+3n/9Ee/YoNK1eHU783m/OU7sy+j
      04s5VFNJuGSZcW8iMZs3GfdlsDdNx9J4F6+fFrgp0qfglVdeoaSkhKGhIeLj46mrqwslwC68
      +uqr5OfnMzQ0BMBTTz3F8vIyFy5cICYmBplMxq1bt6ioqGBiYoKcnBwqKioE07szAcISUVuG
      +ee3P+TEk59nYnCW7JRIHnlsP++daeFIYw0ibSrF6RFYzUskF9UTJoe1rQCTN3t54qkneO+d
      t6gqTOWb3/oONpGYlcFhOlYmOFSox7nlQhuWhMv54HSGGx0dJScnB6/Xy/r6OkqlEq/XG6oH
      +gTj4+NkZWXh8/nIzs7eng1ssVh47LHH6O3tpbq6ertA7qmnnqKjo0NQzTsTwDqPK/xzPPGY
      C3W4gfr9UcwPdjNt8pCol7KwZiWAmC2XE7FEwux4PwqphO4lMSWRIs698xo9kxaUG+NEVZxg
      bzS83Suhsqqakkwl7oUAC7MLhOmjBAj37nA4HPT19aHX64mPj8fhcODxeEIJ8AkcDgf9/f1o
      tdrtS574+HgUCgVnzpwhJiaGsbExsrKyMJlMvPXWW4IugsGvcYHEEikKmQSP149UKsbjuf1p
      597aQiKT4/O4kSkUeLZciMS3V0P9ASDgR6FQ4vG4IeAnIJKgkMvweT2IJFLEwJbbjVwuZ8vl
      vP03n+Dxxx8PysZYP7+29fl8+P1+5HJ56BJoFwKBwHYz3J9Pg8nKyto+YwYCge3hgi6XC4VC
      IeiwwV1vgv0+L06fFwDv7S84nbcXrnxbtxeAfD/7P37vr/yt0+n45SPh8Hp+9m/PL/3Or18E
      6+np4atf/eqd6g8R4jci6GzQvLw8/uIv/kJoGSEeEnZNAF1kHGnxegYGh/H+BjMgxDIV+fk5
      LE4M4ZVHIPdvYvXIyEmNY2hwCLdv5zWQQqEIyuZTP2/sND4+jlgsprCwMFQM9wm8Xi/9/f1k
      Z2djNpsBSEhIwO/3MzIyQlJSEj6fD5/Ph06nY2RkhMzMTEHvpXYmgFjHV377aT5+/zSRhiis
      my5kkgDxyal4kXDiYAX/9oPXiU1KZnFqjIj4VBRiH1KpmNGxWbKy05iamsYQaUCh1aOUR/DF
      Z4/TuSwnyT+JM3Yvm1OTZMZp+EmLsA7AneL3+3n//fcpKSkhKiqKGzdukJ+fH0qAT9DR0YFS
      qeTKlSvbhXEGg4G5uTnW1taYm5sjJiYGt9uNRCJha2uLjo4OamtrBdO8y4QYA6KNGfqGRrZt
      0KzEMMr376Xl3DlkMilF+09icM9woLYUrcGIUiZlYsNHU6MFY3IaXb29VKbp+MY//5T6hno+
      PvMGs/5o4gv1XL9yhcZ91UT4HpzxZG1tbYSFhWE2m0lMTCQ9PT2odzkJRUREBN3d3cTFxaHX
      65FIJLjdblwuF3l5efT29pKdnc3Q0BAul4uSkpIgtEFts8x6D/H8k8dxyBTUNxQx1tPNgtlJ
      lFqKM6DEY50ioSCH5dlR1iwO5FIJA6si0lVOvFubDE8twpKZpPJGYsVbaKPi2ZdVQZ5RxuBS
      DwqFhKtnH5xFsMzMTEQiESKRiJmZGfLz84WWFJR4vV4kEgkSiYT5+dvjryIiItDpdJw+fZqM
      jAxaW1sZHR2lpqaGN954g7179wqqOeiK4YLVBg1xd8zOzmI0GgW1Ov89gs4Fam9v54UXXhBa
      RoiHhKBLgKqqqtAZIMR9Y9fzUlJ2CcePHEAh/cRKp0iE/FPc/Cm0UTx28gmyE6MpqWrkUEMV
      uvBYjp14DIP2wSojGBsbY3FxkXfeeYe3334bt9sttKSgw+fzcfbsWebm5vB4PHR2dgJgs9l4
      7733mJ6e5saNG1y4cAGz2cwHH3yAzWYTVPPOBJAZeOZYFRcuXychJZOI8DgSY+M4fOxx9jU+
      wn//f/9PUhISOXriJMmxEdQ1Pcajh5s5eeII+rBoTjx+gpi4OPbtqyM7NYrurlGOHz+EZWmM
      uML9fP7zTzI/PsfxIw0ChHt3eDwe2tvbWVtb4/jx40RERIQs0F3o6uoiPT2d6Ohouru7GR8f
      B26XxJeXlzMwMEBGRgZut5uLFy9SUFAQhC6QVI3PbmbTbufAnmomh2ZJj1WSU5DDtdbzdHV2
      YNz7CGvDH3Pit57C7weJTEHvkpf/9Ef5mNbtVOw7QGV8gP/v9UV++9kDvPqDH1B+9HmWu0+j
      za1nfXUNSUnq/Y/2Lvnwww/Z2NhgZGSEyMhIYmNjQwmwC06nk8HBQTo6OpiZmcHlcmG321Eq
      lYyNjaHT6bBarXg8HsrLy+nt7cXr9f7HB/4M2ZkAzlluTFfw3JPHWLJvUlaewsjNflTzC4i8
      Hrak4Vin+qnc10xvx1XEmihkEjHzZhEfT9kpyEtnbnoK19Q6SXm5OE0bpBWUkBKtYH4zkd7r
      1zn0+KO0nfmJAOHeHSdOnMBsNmOz2djc3CQzM1NoSUFJSUkJLS0t5Ofn88wzz3Dr1i2mpqaQ
      y+UsLy8TFxfHyMgIbrcbt9vN5uYmDQ3CXgmEbNAQnylms5nw8PCgrZwNOhcoZIOGuJ8EXQKE
      bNAQ95NdE6C84VHSI+C9D87gcP/yhBg5sYYwlpbX7ujg4QmZHDlQzVx/J4rEXGKUPi7f6Kep
      tpjvn3rr3kRwn2hvbychIWF7r2uoNeJOTCYTZ86coby8nPj4eK5cucKRI0cwmUxcvHiR4uJi
      VlZWWF1dZd++fVy6dIny8nKSkpIE07wzAZQJ7C8I5+9efJ38or2sLpmJCleQX1rCyrqJJw7X
      8Z1/eo2yihJGb7aRXLQfrcxHQAKt59spr95Lb28vZcX5tLdeoPXGOCeqM3j5nYs8/+XfgXMt
      aKMOCxDq3bO5ucn8/DxKpRKr1YpCocDn84US4BPMzMwQFRVFQkIC3d3d22slCwsLaDQauru7
      OXr0KDdv3uT69evo9Xp0Op2gmneuA/i9iOVKZHI5mTkFGJMySYuNJc5oRCXe4mZPN5E55Yzd
      uEjV/iYMWjFarYrxDRXPP/c4cVol0ck5xIotWBUpHK8x8m+vn+PJ5z/P5Z/+gDmTA4/vN9hk
      IABtbW2sra3R39+/3RFOaPsuGElMTCQjI4N3332X3t5ebt68id1uJycnh5ycHORyOf39/WRl
      ZREZGYnBYKCtrU1QzTvPAO4V3j43yOED+xgbHyU9PpyhgXnE0ZFMj43jFutY7r9EcUU1LR+8
      i1wXhUQiZtkGr3ZtUlZZxtLkAC0jFtTqJDZcIkpKC7BvrJNdVIYofB23w0V5fjodAxMChPzp
      OXToEDabDYfDwfDw7c7YoSHZOxGLxfT29tLQ0EB8fDxTU1MMDg6SmJjIrVu3qK6upqOjg4WF
      BWpra+no6KCwsFBQzUFngx48eJC//uu/FlpGiHvE1tYWCoVCaBm/lqBzgebn5/nJTx6cRbIQ
      DzZBlwB5eXn85V/+pdAyQjwk7Doh5rFnvojeu75jQoxYoSE3LY6BofE7OnhUahFHG6uwLQzj
      0SeRaFDT3jHAnj0FTN68yPkbI/cqjs+U+fl5zp07R3l5OaOjoywtLfHFL34xdB/wCWZnZ2lv
      bycpKYn5+XnUajXNzc2YzWYuXrxIVFQUNpsNr9fLnj17uHjxIvv27QuyCTGaJLJ0Vr79L++y
      r+Ewi9PLJMZqKancw/DEBMcO1vL9185SvieL2bFekov2o5MHcPoDdF25TlVdDV3dHdSWFvDa
      qVfoGk6iNCbAWx+f47e/+DQzQ51oYlPQKR6cPbUrKytIpVIMBgNZWVm0tbUF9XWtUCQkJGw3
      DXY4HKysrOBwOIiMjESj0SAWi7Hb7WxubjI4OIhIJApCG9S1gSQ8gSRjAsakZNKysghXSPDL
      tUQoYHBwCFVsKqPd10jNLsBjX8O+uUHn+Cb791fiNc3hQIdl8iaipGoa0yT89PwQf/iHX+H0
      G6fIbniaFKY594B8+sPtN7axsZEbN24wODhIXl5e0Na2CInZbKa6uprV1VUeffTR7a2QFouF
      kpISTCYTzc3NGI1GsrKyaGxspLu7W1DNO88APgv/+sq7FKTG0Xr5AkkxOvqmFjGLYLS3G0NK
      DmvTE6QXFPDjUz9Crg1HLBZh3RIxdG6TorIyFkaHecftYEthYFCbSnpKFK2X2kjKyGZ+uhdV
      rIGkuEhGp5cFCPnTExYWxvXr12lsbMTlchEZGSm0pKBEIpHQ19dHXV0dY2Nj7N17e1E0PT19
      eyP8wsIC2dnZxMXF0dnZyb59+wTVHHQ26N69e/m93/s9oWWEeEgIOhdIIpGg0WiElhHiISHo
      EiAhIYHjx48LLSPEQ8IuCSDjt//Tn7K1MLLDBpWq9dSUZHK5rfOODh6dXszR/bWovIssujXk
      ZaRw/uPz5JeUY5m8yk9auu5VHJ8p4+PjXLp0ifr6erq6uoiOjqahoSFoe90IRU9Pz3a/z1+e
      EGOxWLh48SJqtZry8nK+//3vc/z4cdra2igqKhK0OdYuE2KSCLON8rdvvsvRk88yNTxHZlIE
      jUfqaLlwiSONNYi1KZRkRbGxNk9yUT06eQCTO8B41y0ee+I4Zz58j+qidP72f7zIsmML0ewo
      t9bkJEXKGB2ZpLTxEaydZgHCvTvcbjcqlQqn08na2hpqtXp7AESIX6BUKpFIJAwMDJCbm4tY
      LN42DZRKJVqtlqGhIQoKCjCbzTz33HPcuHFDUM0730HrIu6ITA4frCfcEE11bQlsWVm0+onX
      SZhdMiGSKbBtmFGo1CxODzM9Oc6lziliozVcb3mXwXkLg+0XCN/zKJWxMGuT87/+yRcZ7h8m
      MTON2dFxYoyJAoR7d2i1WmJiYlheXiYhIQGHw7E9/TzEL4iOjkar1ZKVlcXExAQTExM4nc7t
      RbGlpSVMJhM3btzA7Xbz4YcfCj5lZ1cXSKZQoVPLcbi8qBRSHA4XGp0Wu9WCXK3F7bCj1oVh
      t24glsoQAR4/iPxewvTh2O028Pvwi2WEadW43S4kMgUSAtidW2hUiv+/vXOLafPM0/jvA3wA
      fAo22ASwMadAEoOBBFIIJNkAZZum2zZttO10Dq1mppqbvRhpbjqXK1VaaSvNxUijaqS9GM20
      qkYze4hWZXPCgzmkDSYJYAKE2hiTGAjG+IDxCTMXbOmocTTZzGzsUf27sWTL1vN+8v/73u/5
      3vf/4N/0EU/RHj0T9wTv7Ozs722Nx+PE43Hkcnn2WcDXiMfjBAIBDhw4wPb2NoIg4HA4qK6u
      ZmtrC7lcjkQiIRaLkZeXh9/vR6FQpHVfRcqb4Hh0m43oXopL5H/DXKLevTNe1L+597rh3fvg
      a1GqXu+f7haLsx75MjHmqwZI2+Gtxwqamprivffee1L9WbL8RWScC1RVVcW7776bbhlZviGk
      LIAChZoyjQyH00WKWcoTk5MnwWg0sH7fhUhRgiwvxuLyKmpdGVHfGqFo/JHvFBYWZlxSfCQS
      weVyYTAY2NzcuwJqtdrsFCgFfr9/L1AxFkMkElFQUEAsFsPlcqHT6RAEgWQyiUwm4+HDh2i1
      2rTqffQmOKeQd77/FiqlAtUBFWJxPgXSfPSVVZRVHeIHb7+BvKAAvdFIoVSErkxPRXk5xsoK
      8vIkGKuMSKRSSrQ6DDV1HNRV871vvcKhukrOXXwbg66EH/7kp5ys06VhuE9HIBAgFAoxNDSE
      1Wrlxo0b2d6gKUgmk1y6dIn5+Xnsdvt+a8Tt7W2CwSBDQ0MsLCwwOzvLxsYGIyMjaVacMiGm
      hDy/i5u3pr5KiKlQceLMcf7n6lW0JRqaz7xCae46qjMnUOmqyRfn4grsIAk+pOHIUcbGb9JW
      fYB/+cUnVHZ3MWz5D3a0TYSWJ6nvPo/HOYdM9rfztFetVmO1WjEajWxsbGQt0McwMTFBUVER
      wWCQxsZGlpeXAZDL5ayurqJSqaivr2d2dhaNRkNZWVmaFT8mIWZF+HvevHCeWH4hp06b+eLO
      BA82Y+hkYkIJMTtbfoobDDx84CCwvYMoLw/7mkBNYZi5yc+461wld22GirZeKqUJviiu4uWX
      z/CZZZAlxw0EcRfy3Iy7/XgsX57JfD7ffl7wl69ZvkKn07G5uUksFmNwcJC1tbV9mzMcDiMI
      AiMjI8zNzSESiRgdHUUsFtPc3Jw2zRm3GC4TbdAsT8/i4iJ6vT5jr5gZdxrOtkbM8izJuALI
      tkbM8ixJWQDaygaO1ZVw9doQ0a/5oDmCQHL3ybxRUb6Ksz3dzN20kl92BJ00jO0LH70nW5iZ
      GGHGsfKXj+AZEA6HGRgYoKGhgXv37iEIAv39/dmo1BS4XC5kMhnBYBC3201nZyfJZBKLxUJd
      XR3BYJBYLEZtbS3Dw8N0d3dTUFCQNr2PTszyivjOa6cYHptAV1GJUlGMTqOh54XzdJzu4Wf/
      +s9UaHX0nXuR0iIZ7d199Jw5zbkXeijIV/HiSy9SpNbQeqyNw3VlTE7c48KF88Q2lzjYdJbz
      fd3M3bz6N/PnB3A4HHR3d9PQ0MBLL72EUqnM2DltOtnZ2cFqtbK0tMT09DTt7e0IgsDW1hYt
      LS1MTU2xvLxMNBplYGAAs9mcgYvhxDISgYf4g0GaWjupKD9Mu7mNlqP18/OP4AAABh1JREFU
      CLFNbLZxytv68X8xyYU33uTYUSOHGxsJy2v58T+9g15bwcmzz/PKyVocyyFev9jDJx//nprW
      Hvwz1xgcmcDc8xZvnEtfOvj/lZKSEiwWCxaLBY/HQ3FxcbYvaAoGBgYIhULMzc3hdrv56KOP
      CIVCSKVS7HY73d3dlJaWMjk5iclkYmxsbP/BYrp4dAoUXuK25znevHCeh9EobSeqmb8zzf21
      daQ5ArtSNeG7Mxw/2cfd25+TW6ghLzcHj09gaDlMfZ0e16KLqMtLZZOZmNdLRUMTh/VKnNta
      DpZG2I2HWXR70jDcpyMc3lvPVFxcjM/no66uLs2KMpP+/n68Xi+hUAiXy0UgEMDpdO4HjItE
      IhKJBAcPHkQulxOLxejq6kqr5qwNmuX/lfX1ddRqdcYuG8k4Fyhrg2Z5lmRcAWRt0CzPkpQF
      0NTRQ60ml/8euML2nybE5IpQq2Sse59sO6NCa+T5M8+xNH0TSVk92vwEgzem6TndycTIZebd
      G3+dUTwDbDYbOp0Oj8fD1tYWXV1dWSfoa0QiES5fvkxTUxNOp5NkMsmpU6cIh8NYLBYMBgOJ
      RAKv10tjYyOjo6O0tLSkdfXvowUgKeVsi46ff/gJtfVm1ld9FCnEHG4xs+7b5EJ/Fz//xW9o
      Pm5m7tYoelMXsrwEgkhgePBz2jqOc/vObcxHGpi89Tlj4wu83HWEj/5rmPq33uaC/igrUxa8
      /nAKOZnJ1tYWTqeTnJwc7t69S2dnZ8bOadOJzWZDo9Egl8vx+XxIJBISiQQSiYSOjg6mp6eB
      PVftzp07qNVqVldX01oAKU5huwg5uQg5OdQ1mCivqKW2vJwKvQEpEW7fmkBz+ATOiWFOnn0e
      XZGEoiIVri0F3/n2BUoVhZTXmDDKY2wIWv7hVDW/+uQy5177R8Y//ZiVYJyEqIjXXux99qN9
      SqxWK16vl/n5eSQSCVNTUwSDwXTLyjgEQUAqlWKxWBCLxSSTSRKJBJFIhIWFBdra2kgmk/vv
      FxYW7jts6eLRK0B0hU9HnZzr7WZxyYVRr2TOfo+8pUVW3G6EfDUP7aOYj3XyhyufIpJryMvJ
      wRMU+O1kkObWRlacs1xf8KNQ6gls7XDUfJTkdhDDIROfXfl3Ojra+cOw5dmP9inp7+8nGAwS
      Doe5f/8+fr8/27wrBc3NzVy7do2mpibcbje7u7vMzMygUChwuVzA3tLyjY0NWltbGRsbw2w2
      p1Vzxtmgvb29fPDBB+mWkeWvRDgcTutShz9HxrlADoeDDz/8MN0ysnxDyLgCMJlMvP/+++mW
      keUbQooCEOh79VtoBP+jCTHifGr0WuYXFp/oxzWVR3nhdDs+lx00RkqVYsbvzHHYdIxt9xi/
      u/JkLRYzgStXrlBVVYVKpeL69eu8/vrr6ZaUkVy7dg29Xo9arebq1atcvHiRQCDA4OAgvb29
      WK1W4vE4JpMJq9XKiRMnqKmpSZveFHuCKzisDvOzX17ixMmzrCytcbBExtEWE87lZc6f7eDf
      fvMpx1saWJybwNB4CplolxhJbg59RnPbMabtk3S0mPj9bz/mxtQSJ41SPh64zPd/8F0Wpz9H
      e6iZpanZNAz36VhfXycejxMOh1leXkYmk6VbUkbi9XqJxWJsb28zPT29f5wUCgW1tbXs7Ozg
      8Xiorq7m/v37vPrqq9hstrQWwKM2aCyISKVDU1REhaGScmM1mnwxuQUKlJJd7NNTFJbVYr9x
      nTpTK7vRTWKRELcWI/Q9fxpp1EdCrCa8PM1OaSt/V53Lry9N8O6P3uE/f/VLgrka6uRh7CuP
      b46VadjtdjweDzabDYfDwfj4eNrtu0zEbrfz4MGD/eNks9kIhUL7tmc8Hqevr49kMonX6+XB
      gwfplpzaBVKX1dBSV8K8e5OqUiXzC26OmE3MjI9RUmNidWGWQ80tzNwcQaJUkyMI+COQEwnQ
      +txzzNmnIBYiItXSZqpl1eNCVlROvhDlhs1Ofm4Y94o/paBMXQwXiUSIxWIoFArW1tYoKSlJ
      t6SMJBKJEI1GUSqVrK2tsbCwgMFg4NatW2g0GpRKJaFQiKamJsbGxmhvb09r2OAfAT7WD9CB
      pJlgAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
      uH3aknlfT88AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
